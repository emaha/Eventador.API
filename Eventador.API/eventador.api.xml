<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Eventador.API</name>
    </assembly>
    <members>
        <member name="T:Eventador.API.Authorization.AuthorizationPolicyName">
            <summary>
            Название авторизационных политик
            </summary>
        </member>
        <member name="F:Eventador.API.Authorization.AuthorizationPolicyName.Blocked">
            <summary>
            Политика заблокированного пользователя
            </summary>
        </member>
        <member name="T:Eventador.API.Authorization.BlockedHandler">
            <summary>
            Авторизационный обработчик для проверки заблокированного пользователя
            </summary>
        </member>
        <member name="M:Eventador.API.Authorization.BlockedHandler.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,Eventador.Services.Contract.IUserService)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Eventador.API.Authorization.BlockedHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Eventador.API.Authorization.BlockedRequirement)">
            <inheritdoc />
        </member>
        <member name="T:Eventador.API.Authorization.BlockedRequirement">
            <summary>
            Требование для проверки заблокированного пользователя
            </summary>
        </member>
        <member name="T:Eventador.API.Controllers.AuthController">
            <summary>
            Контроллер авторизации
            </summary>
        </member>
        <member name="M:Eventador.API.Controllers.AuthController.#ctor(Eventador.API.Services.ITokenWithRefreshService,Microsoft.Extensions.Logging.ILogger{Eventador.API.Controllers.AuthController},Eventador.Services.Contract.IUserService)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Eventador.API.Controllers.AuthController.SignIn(Eventador.API.Requests.CredentialsRequest)">
            <summary>
            Вход
            </summary>
            <param name="request"></param>
            <returns>Токен</returns>
        </member>
        <member name="M:Eventador.API.Controllers.AuthController.SignOut">
            <summary>
            Выход со всех устройств
            </summary>
        </member>
        <member name="M:Eventador.API.Controllers.AuthController.RefreshToken(Eventador.API.Requests.RefreshTokenRequest)">
            <summary>
            Обновить токен
            </summary>
            <param name="request">Запрос на обновление токена из refresh token</param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.AuthController.RecoverPassword(Eventador.API.Requests.RecoverPasswordRequest)">
            <summary>
            Восстановление пароля
            </summary>
            <param name="request">Запрос на восстановление пароля</param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.AuthController.GetClaimLogin(System.IdentityModel.Tokens.Jwt.JwtSecurityToken)">
            <summary>
            Получить идентификационные данные для логина
            </summary>
            <param name="refreshToken">Refresh token</param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.AuthController.GetClaimLogin(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Получить идентификационные данные для логина
            </summary>
            <param name="claims"></param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.AuthController.GetIdentity(System.String)">
            <summary>
            Получить идентификационные данные
            </summary>
            <param name="login">Логин</param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.AuthController.GetIdentity(System.String,System.String)">
            <summary>
            Получить идентификационные данные
            </summary>
            <param name="login">Логин</param>
            <param name="password">Пароль</param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.AuthController.GetClaimsIdentity(Eventador.Domain.User)">
            <summary>
            Получить идентификационные данные
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="T:Eventador.API.Controllers.BaseController">
            <summary>
            Базовый контроллер с содержанием информации о пользователе
            </summary>
        </member>
        <member name="P:Eventador.API.Controllers.BaseController.Username">
            <summary>
            Имя пользователя
            </summary>
        </member>
        <member name="P:Eventador.API.Controllers.BaseController.UserId">
            <summary>
            Id пользователя
            </summary>
        </member>
        <member name="T:Eventador.API.Controllers.EventsController">
            <summary>
            Контроллер событий
            </summary>
        </member>
        <member name="M:Eventador.API.Controllers.EventsController.#ctor(Eventador.Services.Contract.IEventService)">
            <summary>
            ctor
            </summary>
            <param name="eventService"></param>
        </member>
        <member name="M:Eventador.API.Controllers.EventsController.GetById(System.Int64)">
            <summary>
            Получить по id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.EventsController.GetEventsByRegion(System.Int64)">
            <summary>
            Получить события в регионе (рядом)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.EventsController.GetEventsBySearchRequest(System.String)">
            <summary>
            Получить события по поисковому запросу
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.EventsController.GetEventsByAuthor(System.Int64)">
            <summary>
            Получить события определённого пользователя
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.EventsController.CreateEvent(Eventador.Domain.Requests.EventCreateRequest)">
            <summary>
            Создание события
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.EventsController.UpdateEvent(Eventador.Domain.Requests.EventUpdateRequest)">
            <summary>
            Изменение события
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.EventsController.DeleteEvent(System.Int64)">
            <summary>
            Удаление события
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.EventsController.ActivateEvent(System.Int64)">
            <summary>
            Активация события
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.EventsController.FinishEvent(System.Int64)">
            <summary>
            Завершение события
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.EventsController.SuspendEvent(System.Int64)">
            <summary>
            Приостановка события
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.EventsController.CancelEvent(System.Int64)">
            <summary>
            Отмена события
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.EventsController.BlockEvent(System.Int64)">
            <summary>
            Заблокировать событие
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.EventsController.UnblockEvent(System.Int64)">
            <summary>
            Разблокировать событие
            </summary>
            <returns></returns>
        </member>
        <member name="T:Eventador.API.Controllers.ParticipationsController">
            <summary>
            Контроллер участия (добавление в список участников события)
            </summary>
        </member>
        <member name="M:Eventador.API.Controllers.ParticipationsController.#ctor(Eventador.Services.Contract.IEventService,Eventador.Services.Contract.IParticipationService)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Eventador.API.Controllers.ParticipationsController.GetByEventId(System.Int64)">
            <summary>
            Получить список людей зарегистрированных на событие по его Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.ParticipationsController.GetByUserId(System.Int64)">
            <summary>
            Получить события в которых участвует пользователь
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.ParticipationsController.Register(System.Int64)">
            <summary>
            Зарегистрироваться на событие
            </summary>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.ParticipationsController.Unregister(System.Int64)">
            <summary>
            Отписаться от события
            </summary>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="T:Eventador.API.Controllers.ReviewsController">
            <summary>
            Контроллер обратной связи
            </summary>
        </member>
        <member name="M:Eventador.API.Controllers.ReviewsController.#ctor(Eventador.Services.Contract.IMarkService)">
            <summary>
            ctor
            </summary>
            <param name="markService"></param>
        </member>
        <member name="M:Eventador.API.Controllers.ReviewsController.RateEvent(Eventador.Domain.Requests.RateEventCreateRequest)">
            <summary>
            Оценить событие
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.ReviewsController.GetEventFeedback(System.Int64)">
            <summary>
            Получить отзывы о событии
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.ReviewsController.GetPersonRating(System.Int64)">
            <summary>
            Получить рейтинг пользователя
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.ReviewsController.GetEventRating(System.Int64)">
            <summary>
            Получить рейтинг события
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.ReviewsController.ComplainEvent(Eventador.Domain.Requests.ComplaintCreateRequest)">
            <summary>
            Пожаловаться на событие
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.ReviewsController.ComplainPerson(Eventador.Domain.Requests.ComplaintCreateRequest)">
            <summary>
            Пожаловаться на пользователя
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Eventador.API.Controllers.UsersController">
            <summary>
            Контроллер пользователей
            </summary>
        </member>
        <member name="M:Eventador.API.Controllers.UsersController.#ctor(Eventador.Services.Contract.IUserService)">
            <summary>
            ctor
            </summary>
            <param name="userService"></param>
        </member>
        <member name="M:Eventador.API.Controllers.UsersController.GetByToken">
            <summary>
            Получить пользователя по токену(т.е. свои)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.UsersController.SignUp(Eventador.API.Requests.CredentialsRequest)">
            <summary>
            Получить пользователя
            </summary>
            <param name="request">Запрос на регистрацию</param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.UsersController.Get(System.Int64)">
            <summary>
            Получить пользователя
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.UsersController.Create(Eventador.Domain.Requests.UserCreateRequest)">
            <summary>
            Создать пользователя
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.UsersController.Update(Eventador.Domain.Requests.UserUpdateRequest)">
            <summary>
            Обновить данные пользователя
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.UsersController.Subscribe(System.Int64)">
            <summary>
            Подписаться
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.UsersController.Unsubscribe(System.Int64)">
            <summary>
            Отписаться
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.UsersController.BlockUser(System.Int64)">
            <summary>
            Заблокировать пользователя
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Controllers.UsersController.UnblockUser(System.Int64)">
            <summary>
            Разблокировать пользователя
            </summary>
            <returns></returns>
        </member>
        <member name="T:Eventador.API.Middlewares.IdentityNameEnrichLogMiddleware">
             <summary>
            
             </summary>
        </member>
        <member name="M:Eventador.API.Middlewares.IdentityNameEnrichLogMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
             <summary>
            
             </summary>
             <param name="next"></param>
        </member>
        <member name="M:Eventador.API.Middlewares.IdentityNameEnrichLogMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
             <summary>
            
             </summary>
             <param name="context"></param>
             <returns></returns>
        </member>
        <member name="T:Eventador.API.Middlewares.IdentityNameEnrichLogMiddlewareExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="M:Eventador.API.Middlewares.IdentityNameEnrichLogMiddlewareExtensions.UseIdentityNameEnrichLog(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
             <summary>
            
             </summary>
             <param name="app"></param>
        </member>
        <member name="T:Eventador.API.Middlewares.TokenAuthenticationMiddleware">
            <summary>
            Middleware для аутентификации через токен
            </summary>
        </member>
        <member name="M:Eventador.API.Middlewares.TokenAuthenticationMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Eventador.API.Middlewares.TokenAuthenticationMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            InvokeAsync
            </summary>
        </member>
        <member name="T:Eventador.API.Middlewares.VersionMiddleware">
            <summary>
            Мидлвар добавляющий endpoint /version c возвратом версии приложения.
            Версия и имя достаются из конфигурации по переменным "App" и "Version".
            <remarks>
            </remarks>
            </summary>
        </member>
        <member name="M:Eventador.API.Middlewares.VersionMiddleware.HandleMapVersion(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
             <summary>
            
             </summary>
             <param name="app"></param>
        </member>
        <member name="T:Eventador.API.Middlewares.VersionMiddlewareExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="M:Eventador.API.Middlewares.VersionMiddlewareExtensions.UseVersion(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Http.PathString)">
             <summary>
            
             </summary>
             <param name="app"></param>
             <param name="path"></param>
        </member>
        <member name="T:Eventador.API.Models.EventModel">
            <summary>
            Упрощенная модель события
            </summary>
        </member>
        <member name="P:Eventador.API.Models.EventModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Eventador.API.Models.EventModel.Title">
            <summary>
            Заголовок
            </summary>
        </member>
        <member name="P:Eventador.API.Models.EventModel.Description">
            <summary>
            Описание
            </summary>
        </member>
        <member name="P:Eventador.API.Models.EventModel.TitleImageUrl">
            <summary>
            Заголовочная картинка
            </summary>
        </member>
        <member name="P:Eventador.API.Models.EventModel.ImageUrls">
            <summary>
            Список картинок отображаемых в деталях
            </summary>
        </member>
        <member name="P:Eventador.API.Models.EventModel.Type">
            <summary>
            Id категорий к которым  относится событие
            </summary>
        </member>
        <member name="P:Eventador.API.Models.EventModel.Status">
            <summary>
            Статус события
            </summary>
        </member>
        <member name="P:Eventador.API.Models.EventModel.StartDate">
            <summary>
            Дата начала
            </summary>
        </member>
        <member name="P:Eventador.API.Models.EventModel.EndDate">
            <summary>
            Дата окончания
            </summary>
        </member>
        <member name="P:Eventador.API.Models.EventModel.Price">
            <summary>
            Стоимость входа/билета/участия/депозит
            </summary>
        </member>
        <member name="P:Eventador.API.Models.EventModel.RegionId">
            <summary>
            Регион
            </summary>
        </member>
        <member name="P:Eventador.API.Models.EventModel.Lat">
            <summary>
            Широта
            </summary>
        </member>
        <member name="P:Eventador.API.Models.EventModel.Lon">
            <summary>
            Долгота
            </summary>
        </member>
        <member name="P:Eventador.API.Models.EventModel.CreateDate">
            <summary>
            Дата создания
            </summary>
        </member>
        <member name="P:Eventador.API.Models.EventModel.AuthorId">
            <summary>
            Id аккаунта создателя
            </summary>
        </member>
        <member name="P:Eventador.API.Models.EventModel.AccessType">
            <summary>
            Тип доступа (видимости)
            </summary>
        </member>
        <member name="M:Eventador.API.Models.EventModel.Create(Eventador.Domain.Event)">
            <summary>
            Создание модели
            </summary>
            <param name="evnt"></param>
            <returns></returns>
        </member>
        <member name="T:Eventador.API.Models.SmallEventModel">
            <summary>
            Упрощенная модель события для представления в общем списке событий (при поиске)
            </summary>
        </member>
        <member name="P:Eventador.API.Models.SmallEventModel.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Eventador.API.Models.SmallEventModel.Title">
            <summary>
            Заголовок
            </summary>
        </member>
        <member name="P:Eventador.API.Models.SmallEventModel.Description">
            <summary>
            Описание
            </summary>
        </member>
        <member name="P:Eventador.API.Models.SmallEventModel.StartDate">
            <summary>
            Дата начала
            </summary>
        </member>
        <member name="P:Eventador.API.Models.SmallEventModel.TitleImageUrl">
            <summary>
            Заголовочная картинка
            </summary>
        </member>
        <member name="P:Eventador.API.Models.SmallEventModel.AuthorId">
            <summary>
            
            </summary>
        </member>
        <member name="M:Eventador.API.Models.SmallEventModel.Create(Eventador.Domain.Event)">
            <summary>
            Создать из запроса
            </summary>
            <param name="evnt"></param>
            <returns></returns>
        </member>
        <member name="T:Eventador.API.Program">
             <summary>
            
             </summary>
        </member>
        <member name="M:Eventador.API.Program.Main(System.String[])">
             <summary>
            
             </summary>
             <param name="args"></param>
        </member>
        <member name="M:Eventador.API.Program.BuildWebHost(System.String[])">
             <summary>
            
             </summary>
             <param name="args"></param>
             <returns></returns>
        </member>
        <member name="T:Eventador.API.Requests.CredentialsRequest">
            <summary>
            Данные авторизации
            </summary>
        </member>
        <member name="P:Eventador.API.Requests.CredentialsRequest.Login">
            <summary>
            Логин
            </summary>
        </member>
        <member name="P:Eventador.API.Requests.CredentialsRequest.Password">
            <summary>
            Пароль
            </summary>
        </member>
        <member name="P:Eventador.API.Requests.CredentialsRequest.Lastname">
            <summary>
            Фамилия
            </summary>
        </member>
        <member name="P:Eventador.API.Requests.CredentialsRequest.Firstname">
            <summary>
            Имя
            </summary>
        </member>
        <member name="P:Eventador.API.Requests.CredentialsRequest.Email">
            <summary>
            Электронная почта
            </summary>
        </member>
        <member name="T:Eventador.API.Requests.RecoverPasswordRequest">
            <summary>
            Запрос на восстановление пароля
            </summary>
        </member>
        <member name="P:Eventador.API.Requests.RecoverPasswordRequest.Username">
            <summary>
            Логин пользователя. Номер телефона
            </summary>
        </member>
        <member name="T:Eventador.API.Requests.RefreshTokenRequest">
            <summary>
            Запрос на создание Refresh-токена
            </summary>
        </member>
        <member name="P:Eventador.API.Requests.RefreshTokenRequest.RefreshToken">
            <summary>
            Токен для обновления
            </summary>
        </member>
        <member name="T:Eventador.API.Services.CacheRefreshTokenService">
            <summary>
            Сервис для работы с RefreshToken в кэш
            </summary>
        </member>
        <member name="F:Eventador.API.Services.CacheRefreshTokenService.MaxCountStoredTokensPerUser">
            <summary>
            Максимальное количество хранимых refresh токенов для одного пользователя
            </summary>
        </member>
        <member name="M:Eventador.API.Services.CacheRefreshTokenService.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Eventador.API.Services.CacheRefreshTokenService.SetRefreshToken(System.String,System.String,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Eventador.API.Services.CacheRefreshTokenService.ValidRefreshToken(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Eventador.API.Services.CacheRefreshTokenService.DeleteAllRefreshToken(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Eventador.API.Services.CacheRefreshTokenService.DeleteRefreshToken(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Eventador.API.Services.CacheRefreshTokenService.GetJwtRefreshTokens(System.String)">
            <summary>
            Получить JWT токен refresh`а
            </summary>
            <param name="cacheKey">Ключ для получения из кэша</param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Services.CacheRefreshTokenService.GetStoredRefreshTokens(System.String)">
            <summary>
            Получить сохраненные refresh token`ы
            </summary>
            <param name="cacheKey">Ключ для получения из кэша</param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Services.CacheRefreshTokenService.GetCacheKey(System.String)">
            <summary>
            Получить ключ для кэша
            </summary>
            <param name="login"></param>
            <returns></returns>
        </member>
        <member name="T:Eventador.API.Services.IRefreshTokenService">
            <summary>
            Интерфейс для работы с RefreshToken
            </summary>
        </member>
        <member name="M:Eventador.API.Services.IRefreshTokenService.SetRefreshToken(System.String,System.String,System.TimeSpan)">
            <summary>
            Установить refreshToken для логина пользователя
            </summary>
            <param name="refreshToken"></param>
            <param name="login"></param>
            <param name="cacheExpiration"></param>
        </member>
        <member name="M:Eventador.API.Services.IRefreshTokenService.ValidRefreshToken(System.String,System.String)">
            <summary>
            Проверить, что refreshToken есть для логина пользователя
            </summary>
            <param name="login"></param>
            <param name="refreshToken"></param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Services.IRefreshTokenService.DeleteAllRefreshToken(System.String)">
            <summary>
            Удаление токена
            </summary>
            <param name="login"></param>
        </member>
        <member name="M:Eventador.API.Services.IRefreshTokenService.DeleteRefreshToken(System.String,System.String)">
            <summary>
            Удаление токена
            </summary>
            <param name="login"></param>
            <param name="refreshToken"></param>
        </member>
        <member name="T:Eventador.API.Services.ITokenService">
            <summary>
            Интерфейс сервис для работы с авторизационным токеном JWT
            </summary>
        </member>
        <member name="M:Eventador.API.Services.ITokenService.GetToken(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Получить токен
            </summary>
            <param name="claimsIdentity">Идентификационные данные</param>
            <returns>Токен</returns>
        </member>
        <member name="T:Eventador.API.Services.ITokenWithRefreshService">
            <summary>
            Интерфейс сервис для работы с авторизационным JWT с обновлением авторизационного токена
            </summary>
        </member>
        <member name="M:Eventador.API.Services.ITokenWithRefreshService.GetTokenByRefreshToken(System.Security.Claims.ClaimsIdentity,System.String)">
            <summary>
            Получить токен по refresh token
            </summary>
            <param name="claimsIdentity">Идентификационные данные</param>
            <param name="refreshToken">Токен для обновления access token</param>
            <returns>Токен</returns>
        </member>
        <member name="M:Eventador.API.Services.ITokenWithRefreshService.ValidRefreshToken(System.String,System.String)">
            <summary>
            Проверить refresh токен для пользователя
            </summary>
            <param name="login">Логин пользователя</param>
            <param name="refreshTokenForCheck">refresh токен для проверки</param>
            <returns>true-валидный,false - невалидный</returns>
        </member>
        <member name="M:Eventador.API.Services.ITokenWithRefreshService.DeleteAllRefreshToken(System.String)">
            <summary>
            Удалить все refresh токен
            </summary>
            <param name="login">Логин пользователя</param>
        </member>
        <member name="T:Eventador.API.Services.TokenWithRefreshService">
            <summary>
            Сервис для работы с авторизационным JWT с обновлением авторизационного токена
            </summary>
        </member>
        <member name="F:Eventador.API.Services.TokenWithRefreshService.SecurityAlgorithm">
            <summary>
            Алгоритм шифрования
            </summary>
        </member>
        <member name="M:Eventador.API.Services.TokenWithRefreshService.#ctor(Eventador.API.Services.IRefreshTokenService,Microsoft.Extensions.Options.IOptionsMonitor{Eventador.Services.Options.TokenOptions})">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Eventador.API.Services.TokenWithRefreshService.GetToken(System.Security.Claims.ClaimsIdentity)">
            <inheritdoc />
        </member>
        <member name="M:Eventador.API.Services.TokenWithRefreshService.GetTokenByRefreshToken(System.Security.Claims.ClaimsIdentity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Eventador.API.Services.TokenWithRefreshService.ValidRefreshToken(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Eventador.API.Services.TokenWithRefreshService.DeleteAllRefreshToken(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Eventador.API.Services.TokenWithRefreshService.GetLogin(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Получить логин по идентификационным данным
            </summary>
            <param name="claimsIdentity">Идентификационные данные</param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Services.TokenWithRefreshService.GetClaimLogin(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Получить идентификационные данные для логина
            </summary>
            <param name="claimsIdentity">Идентификационные данные</param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Services.TokenWithRefreshService.AddRefreshToken(System.String,System.String)">
            <summary>
            Добавить refresh token пользователю
            </summary>
            <param name="login">Логин</param>
            <param name="refreshToken">refresh token</param>
        </member>
        <member name="M:Eventador.API.Services.TokenWithRefreshService.UpdateRefreshToken(System.String,System.String,System.String)">
            <summary>
            Обновить refresh token пользователю
            </summary>
            <param name="login">Логин</param>
            <param name="newRefreshToken">Новый refresh token</param>
            <param name="oldRefreshToken">Старый refresh token, который нужно заменить</param>
        </member>
        <member name="M:Eventador.API.Services.TokenWithRefreshService.CreateToken(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Создать токен по идентификационным данным
            </summary>
            <param name="claimsIdentity">Идентификационные данные пользователя</param>
            <returns>Токен</returns>
        </member>
        <member name="M:Eventador.API.Services.TokenWithRefreshService.GetAccessToken(System.Security.Claims.ClaimsIdentity,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Получить авторизационный токен
            </summary>
            <param name="claimsIdentity">Идентификационные данные</param>
            <param name="dateFrom">Дата начала действия токена</param>
            <param name="dateExpires">Дата истечения токена</param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Services.TokenWithRefreshService.GetRefreshToken(System.Security.Claims.ClaimsIdentity,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Получить токен для обновления токена авторизации
            </summary>
            <param name="claimsIdentity">Идентификационные данные</param>
            <param name="dateFrom">Дата начала действия токена</param>
            <param name="dateExpires">Дата истечения токена</param>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Services.TokenWithRefreshService.GetExpirationAccessToken">
            <summary>
            Получить время истечения авторизационного токена
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eventador.API.Services.TokenWithRefreshService.GetExpirationRefreshToken">
            <summary>
            Получить время истечения refresh token
            </summary>
            <returns></returns>
        </member>
        <member name="T:Eventador.API.Startup">
             <summary>
            
             </summary>
        </member>
        <member name="M:Eventador.API.Startup.#ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
             <summary>
            
             </summary>
             <param name="env"></param>
        </member>
        <member name="P:Eventador.API.Startup.Environment">
            <summary>
            Environment
            </summary>
        </member>
        <member name="P:Eventador.API.Startup.Configuration">
            <summary>
            Конфигурация приложения
            </summary>
        </member>
        <member name="M:Eventador.API.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
             <summary>
            
             </summary>
             <param name="services"></param>
        </member>
        <member name="M:Eventador.API.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
             <summary>
            
             </summary>
             <param name="app"></param>
             <param name="env"></param>
        </member>
        <member name="M:Eventador.API.Startup.GetRetryPolicy">
            <summary>
            Базовая политика повторов с колебанием задержки
            <remarks>Политики, заданные с помощью этого метода расширения, обрабатывают HttpRequestException,
            ответы HTTP 5xx и ответы HTTP 408</remarks>
            </summary>
        </member>
        <member name="M:Eventador.API.Startup.RegisterAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Регистрация аутентификации
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Eventador.API.Startup.RegisterTokenService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Регистрация сервисов для работы с токеном
            </summary>
        </member>
        <member name="M:Eventador.API.Startup.RegisterAuthorization(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Регистрация авторизации
            </summary>
        </member>
        <member name="M:Eventador.API.Startup.RegisterAuthorizationHandler(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Регистрация обработчиков авторизации
            </summary>
        </member>
        <member name="M:Eventador.API.Startup.RegisterHealthChecks(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Регистрация сервиса мониторинга работоспособности
            </summary>
            <param name="services"></param>
        </member>
    </members>
</doc>
